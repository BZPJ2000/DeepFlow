import importlib

# 示例：加载优化器类
if "optimizer_class" in st.session_state:
    optimizer_info = st.session_state["optimizer_class"]
    module = importlib.import_module(optimizer_info["module_path"])  # 动态加载模块
    optimizer_class = getattr(module, optimizer_info["class_name"])  # 动态加载类
    optimizer_instance = optimizer_class(model, learning_rate=st.session_state["learning_rate"])

# 示例：加载损失函数类
if "loss_class" in st.session_state:
    loss_info = st.session_state["loss_class"]
    module = importlib.import_module(loss_info["module_path"])  # 动态加载模块
    loss_class = getattr(module, loss_info["class_name"])  # 动态加载类
    loss_instance = loss_class()

# 示例：加载评估指标类
if "metric_classes" in st.session_state:
    metric_instances = []
    for metric_info in st.session_state["metric_classes"]:
        module = importlib.import_module(metric_info["module_path"])  # 动态加载模块
        metric_class = getattr(module, metric_info["class_name"])  # 动态加载类
        metric_instance = metric_class()
        metric_instances.append(metric_instance)





    if metric_classes:
        st.write("已选择的评估指标类:")
        for cls in metric_classes:
            st.write(f"- {cls.__name__}")

        # 实例化并调用评估指标类
        for cls in metric_classes:
            try:
                metric_instance = cls()
                st.write(f"实例化 {cls.__name__} 成功！")
                # 调用评估指标类的计算方法
                # 例如：metric_instance.calculate(y_true, y_pred)
            except Exception as e:
                st.error(f"实例化 {cls.__name__} 失败: {e}")